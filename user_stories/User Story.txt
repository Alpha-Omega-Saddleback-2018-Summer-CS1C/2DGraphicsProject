David <DavidE92@live.com>
Brett <bsaiki0@saddleback.edu>
Justis <justis.ketcham@gmail.com>
Greg <ggraffius0@saddleback.edu>

#1 As a computer programmer, I can manually input a file to create shapes.
a) Description: A file can be passed into the program which creates shapes to be drawn. Any error will result in the program notifying the user and exiting.
b) Tasks:
  - Create a parser to define shape parameters
    - Check for syntax errors
    - Notify and abort on error
  - Add shapes to the shape vector
c) Tests:
  - Verify that a shape will be added to the vector
  - Verify that any syntax errors will generate an error and cause the program to exit
d) Assignee:
  - Brett: implement file-to-token converter
  - Greg: implement token-to-vector converter
e) Estimation: 45 hours
f) Priority: 3
g) Goals:
	- (Advanced) user is able to create file to parameterize shapes
	- Adds shapes to the shape vector
	- Any errors in syntax will result in the program aborting

#2 As a computer programmer, I can receive verbose errors from the file parser
a) Description: Any parser errors will print detailed errors or suggest fixes to the user
b) Tasks:
	- Create an error object (possibly)
	- Print error to screen
c) Tests:
	- Verify that syntax errors result in accurate detailed errors
d) Assignee:
	- Brett: implement error logic
	- Justis: implement error object
e) Estimation: 30 hours
f) Priority: 10
g) Goals: 
	- Prints errors and suggests fixes to user before exiting program

#3 As a teacher, I can login to the program
a) Description: Users can login to the program with a username and password. Program will only allow access when username and password matches
b) Tasks:	
	- Create username and password logic
	- Create file to store username and password
c) Tests:
	- Verify that program will only allow access when username and password match
	- Verify that username and password will persist past a single use
d) Assignee:
	- Brett: implement matcher
	- David: implement saving and loading username and passwords
e) Estimation: 12 hours
f) Priority: 2
g) Goals:
	- A user can create a username and password and login

#4 As a user, I can create multiple logins
a) Description: allows the user to log in or create a new login
b) Tasks: 
	-read and write to a txt file
	-create an easy to use interface
	-possibly encrypt the txt file
c) Tests: 	
	-verify a new login works
	-verify old login still works	
d) Assignee:
	-Greg
e) Estimation:
f) Priority:
g) Goals:	

#5 As a student, I can render shapes
a) Description: Take in a text file and output the shapes
b) Tasks:
	-finish the hiearchy of the shape class
	-read from a text file
	-utilize information from the text file
	-draw shapes described from the text file
c) Tests:
	-verify it works
d) Assignee:
e) Estimation: 100 hrs
f) Priority: 10
g) Goals:

#6 As a student, I can define multiple shapes
a) Description:
b) Tasks:
c) Tests:
d) Assignee:
e) Estimation:
f) Priority:
g) Goals:

#7 As a user, I can save user-defined shapes to a file
a) Description:
b) Tasks:
c) Tests:
d) Assignee:
e) Estimation:
f) Priority:
g) Goals:

#8 As a student, I can calculate the dimensions, perimeter, or area of any shape
a) Description:
b) Tasks:
c) Tests:
d) Assignee:
e) Estimation:
f) Priority:
g) Goals:

#9 As a programmer, I can utilize the hierachy of the abstract shape class
a) Description:	use the abstract shape class to define other shapes
b) Tasks:
	-include all the shapes needed
c) Tests:
	-works and doesnt crash
d) Assignee:
e) Estimation:
f) Priority:
g) Goals:

#10 As a user, I can update the shapes
a) Description:	Allows the user to update or move the shapes then save changes
b) Tasks:
	-allows shapes to visually move
	-changes are saved
c) Tests:
	-verify shapes can move
d) Assignee:
e) Estimation: 60hrs
f) Priority: 10
g) Goals:
	-probably the last thing to be implemented






















---- EXAMPLE USER STORY ----
#1 As a user, I can cancel a reservation
a)  Description:
A site user can cancel a reservation for a full refund to her 
credit card
How far ahead a user must cancel reservation depends upon the user 
type (see tasks)
A cancelation confirmation will be emailed to the site user
b)  Tasks:
As a premium site member, I can cancel a reservation up to the last 
minute
As a non-premium member, I can cancel up to 24 hours in advance
As a site visitor, I am emailed a confirmation of any cancelled 
reservation
c)  Tests:
Verify that a premium member can cancel the same day without a fee
Verify that a non-premium member is charged 10% for a same-day 
cancellation
Verify that an email confirmation is sent
Verify that the hotel is notified of any cancellation
d)  Assignee:
James, implement front end UI and code behind logic, member class 
data & operations reservation cancelation
Sandra, implement class to email confirmation to user
e)  Estimation: 25
f)  Priority: 9
g)  Done:
User is able to login as a non-premium, premium, guest user and 
cancel reservation (refer to tests)
Appropriate fee is charged to user account
User is refunded balance due minus fee
Appropriate cancelation record recorded via hotel accounting system
Email confirmation is sent to user
All task, test conditions satisfied
Baseline story point estimate value of one = 2 hrs of development time for 
a single developer

